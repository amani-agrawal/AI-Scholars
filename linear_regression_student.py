# -*- coding: utf-8 -*-
"""Linear_Regression_Student.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qW1eFmlfPiMEwNhQ014bMdnrvzOAdVfl

<font color="#de3023"><h1><b>REMINDER: MAKE A COPY OF THIS NOTEBOOK, DO NOT EDIT</b></h1></font>

![](https://stimg.cardekho.com/pwa/img/CarDekho-Logo.svg)

<h1> üöó Introduction to Linear Regression: Buying the Right Car </h1>

# **Introduction**

Imagine this...

You've been working for a year as a data expert and finally save enough money to buy a car. Being a thrifty data expert, you want to get the best bang for your buck.

Imagine that you also have data from the car website [CarDekho](https://www.cardekho.com/), which has information on a wide variety of cars, including their price. You realize that you can use that data to make sure you get a good deal on a new car. In particular, you can figure out exactly how much you should pay for a specific type of car. This can be especially helpful if you run into a tricky car salesperson!

But the question is how can you use the data to figure out how much you should pay?

You can use Linear Regression!

Linear Regression is a method for discovering the relationship between two variables in the dataset, such as price of the car and the year it was made. Data Scientists rely on this method for solving a wide range of problems, especially when it comes to prediction.

Let's get started!

**In this notebook, we'll:**
- Fetch and explore a dataset of cars
- Visualize our dataset with graphs
- Use linear regression to make predictions
- Optional: Use multiple linear regression to make better predictions
- Challenge: Discover the best-value cars!

#**Fetching the Data**

We will use a very common data science library called `Pandas` to load the dataset into this notebook. Using `pandas` we can read our datafile (`car_dekho.csv`) with the line below. Our data will then be assigned and stored under the variable `car_data`.
"""

#@title Run this to import libraries and your data! { display-mode: "form" }
import pandas as pd   # Great for tables (google spreadsheets, microsoft excel, csv).
import os # Good for navigating your computer's files

# Our dataset is hosted on Google Cloud. Here's how we can grab it:
!wget -q --show-progress "https://storage.googleapis.com/inspirit-ai-data-bucket-1/Data/AI%20Scholars/Sessions%201%20-%205/Session%202a%20-%20Linear%20Regression/car_dekho.csv"

# Quiet deprecation warnings
import warnings
warnings.filterwarnings("ignore")

# read our data in using 'pd.read_csv('file')'
data_path  = 'car_dekho.csv'
car_data = pd.read_csv(data_path)

"""# **Exploring the Data**

Great! Now that we have the data from CarDekho we can start exploring it. Running the cell below will output the first five rows in the data. Each row corresponds to a specific car on sale and each column details information about that car. See if you can already spot any pieces of information that might help you find your perfect car.
"""

# let's look at our 'dataframe'. Dataframes are just like google or excel spreadsheets.
# use the 'head' method to show the first five rows of the table as well as their names.
car_data.head()

"""**You'll probably wonder: what are the units of selling price? What does 3.35 mean?! Selling price is actually in lakhs.**

Here is a visual representation of the dataset above. ![carcharts.png](https://i.postimg.cc/bNyjtBFT/Screen-Shot-2019-06-06-at-8-04-46-PM.png)

## What do the columns in the data table represent?

Before diving deeper into the data we need to know what kind of information we have on each car. This is exactly what the columns in the data table are telling us.

You can think about these columns as being the raw ingredients of any future model we build. A good cook knows about every ingredient they are using. Likewise, we need to know about each variable (column) in our dataset. Below are explanations of each one.

* `Car_Name`: This column should be filled with the name of the car.

* `Age`: The number of years since the car was made.

* `Selling_Price`: The price the owner wants to sell the car at.

* `Kms_Driven`: This is the distance completed by the car in km.

* `Fuel_Type`: Fuel type of the car.

* `Seller_Type`: Defines whether the seller is a dealer or an individual.

* `Transmission`: Defines whether the car is manual or automatic.

Using code we can select columns in our data table to inspect them more closely. In the cell below we select the `Fuel_Type` column from our `car_data` variable (which is a dataframe) and then we output the first five rows using `.head()`
"""

car_data[['Fuel_Type']].head()

"""### ‚úç ExerciseÔ∏è

In the cell below, select the `Car_Name` column from our `car_data` dataframe and then output the first five rows.

"""

### YOUR CODE HERE

### END CODE

"""##  How big is our data set?

Each row in the datatable represents a unique car. Using the information in the columns of the datatable you can select the car that best suits your taste.

If we only had a few cars to choose from this would be an easy task. But let's see how many rows we have in our datatable. Run the cell below to get the count of rows.
"""

# use the 'len' method to see how many rows are in our dataframe
print(len(car_data))

"""That's a lot of cars to look at one by one!

Imagine that you are staring at a garage full of cars not knowing which one to choose. That is exactly where we are right now.

[![ryan-searle-377260-unsplash.jpg](https://i.postimg.cc/15xbXsCp/ryan-searle-377260-unsplash.jpg)](https://postimg.cc/kDcTh3d4)



How can you make your task easier? Luckily as a data expert you can use visualization to organize the cars by the most important variables.

# **Visualizing the Data**

One way to look at the data is to use a scatter plot. A scatter plot is a two-dimensional data visualization that uses a dot for each data point to represent the values obtained for two different variables - one plotted along the x-axis and the other plotted along the y-axis.

A scatter plot is used to understand the relationship between **two continuous variables.**

Below, we'll use the `scatterplot` function from the¬†`seaborn` library:

>`sns.scatterplot(x = 'feature_column', y = 'target_column', data = source_data_frame)`

Run the cell below to plot `selling price` vs. `age`!
"""

# first we'll grab our handy visualization tools
import seaborn as sns
import matplotlib.pyplot as plt

# Each dot is a single example (row) from the dataframe, with its
# x-value as `Age` and its y-value as `Selling_Price`
sns.scatterplot(x = 'Age', y = 'Selling_Price', data = car_data)

"""### üí° Discussion Question

Data science is about understanding stories by looking at data visualizations. What do you hypothesize is going on in the scatter plot above?

## Visualizing Categorical Data

`Transmission` is another one of our variables. It can either be `Manual`or `Automatic`.  This is different than what we saw with `Selling_Price` in that `Transmission` is NOT a number.

We call variables like `Transmission` categorical variables.

### üí° Discussion Question
Which of the other variables from our data table are categorical?

There's a specific type of plot for visualizing categorical variables. This is `catplot`. Let's try it out!
"""

# you can do the same thing with categorical variables!! but you will use catplot instead
sns.catplot(x = 'Fuel_Type', y = 'Selling_Price', data = car_data, kind = 'swarm', s = 2)

"""### üí° Discussion Question
What do you take away from the plot above?

### ‚úçÔ∏è Optional Exercise: Groupby

Using the `groupby` function in `pandas`, count the number of `Petrol` vs. `Diesel` vs. `CNG` cars in your dataset. (Hint: the `.count()` function will come in handy!)
"""

### YOUR CODE HERE ###

"""###  ‚úç ExerciseÔ∏è

How do you think price will vary with `Kms_Driven`?

Check your hypothesis against a plot!
"""

### YOUR CODE HERE

### END CODE

"""### üí° Discussion Question
Now that we've looked at our data for a few variables, let's take a step back, and ask:

For each variable, do we expect a car to be more or less expensive?

Try a couple:

* `Seller_Type`
* `Transmission`

Investigate these with seaborn!

Can you figure out what plotting function we should use here? Think about what type of data we are plotting.
"""

### YOUR¬†CODE HERE

### END CODE

"""# **Linear Regression**

### üí° Discussion Question

How would you *quantify* the relationship between age and selling price?

## Linear Regression Review

Linear regression is a statistical approach to find and determine a relationship among an independent variable `x` and a dependent variable `y`. For us, our `x` is `Age` while our `y` is `Selling_Price`. In the below equation, linear regression helps us find the `m` and `b` that best relates our variables. In other words, we are trying to find a "line of best fit" for our variables `x` and `y`.

$y= mx + b$

[![Line of Best Fit](https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Linear_regression.svg/400px-Linear_regression.svg.png)](https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Linear_regression.svg/400px-Linear_regression.svg.png)

Another way to say this is: we create a line that 'summarizes' the story that the data tells us.

**Let's explore linear regression through a demo!**

[Playground!](http://setosa.io/ev/ordinary-least-squares-regression/)

You might have spent some time on this site during lecture, but we ***highly recommend*** you take some time to play around with this on your own.

## Linear Regression in Python

We'll use `sklearn` to run our linear regression below
"""

import sklearn
# let's pull our handy linear fitter from our 'prediction' toolbox: sklearn!
from sklearn.linear_model import LinearRegression
import numpy as np    # Great for lists (arrays) of numbers

# Initializing our X and y variables.
X = car_data[['Age']]
y = car_data[['Selling_Price']]

"""Let's take a look and see what `X` and `y` look like!"""

print(X)

print(y)

"""Next, let's set up our model variable and train the model."""

# set up our model
linear = LinearRegression()

# train the model
linear.fit(X, y)

#@title Visualize the fit with this cell!
import matplotlib.pyplot as plt

y_pred = linear.predict(X)
plt.plot(X, y_pred, color='red')

plt.scatter(X, y)
plt.xlabel('Age') # set the labels of the x and y axes
plt.ylabel('Selling_Price (lakhs)')
plt.show()

"""# **Optional: Interpreting our Model**
Remember! We were trying to find the best `b` and `m` to capture our data's story. We can grab this from the trained model.
"""

print('Our m in lakhs/year: ', linear.coef_)

"""`m` says: The more recent a car is by one year, the selling price is `m` lakhs higher.

### üí° Discussion Question

Let's say you were deciding between a brand new car and the same model that was 3 years older. How much cheaper should the older car be according to our model?

To complete the equation, we still need our intercept `b`
"""

print('Our intercept b: ', linear.intercept_)

"""How should we interpret it? Using our $m$ and $b$ values, how do we find the price of the cars?

### ‚úç ExerciseÔ∏è

You go to a car salesperson to buy a nice used car. The car you want is a 2017 model and he offers to sell it for 7 lakh. Would you take it? If not, how much would you take it for?

# **(Optional) Single Linear Regression: Trying Different Inputs**

In order to try different inputs in linear regression, we will first need to learn how to convert categorical data into numerical data. Let's first learn how to do that with the `Transmission` variable. We can easily transform `Transmission` to a numeric variable by replacing `Manual` with `1` and `Automatic` with `0`.
"""

car_data['TransmissionNumber'] = car_data['Transmission'].replace({'Manual':1, 'Automatic':0})

"""Now that we have `Transmission` converted, we can now check what our dataset looks like!"""

car_data.head(20)

"""Now we're ready to try different values for `X` instead of just the `'Age'` column! If we want to try a categorical variable like `Transmission`, remember to convert it to numerical!"""

#Initializing our X, y variables

X_column = 'Age' # Feel free to try different inputs!
X = car_data[[X_column]]
y = car_data[['Selling_Price']]

#Setting up model
linear = LinearRegression()

#Training
linear.fit(X,y)

#@title Visualize the fit with this cell!
import matplotlib.pyplot as plt

y_pred = linear.predict(X)
plt.plot(X, y_pred, color='red')

plt.scatter(X, y)
plt.xlabel(X_column) # Automated setup of axis labels
plt.ylabel('Selling_Price (lakhs)')
plt.show()

"""# **(Optional) Multiple Linear Regression: Using multiple inputs**

Now that we've tried single linear regression with different inputs, we'll now try to make our model better by using multiple input variables, like `Kms_Driven` and `Transmission`.
"""

X = car_data[['Age', 'TransmissionNumber', 'Kms_Driven']]

# set up our model
multiple = LinearRegression(fit_intercept = True)

# train the model
multiple.fit(X, y)

"""How well did it do compared to our simple linear regression from before? We can actually compare the two with their 'scores'! The score is known as r-squared ($R^2$)."""

print('Our single linear model had an R^2 of: %0.3f'%linear.score(car_data[[X_column]], y))

print('Our multiple linear model had an R^2 of: %0.3f'%multiple.score(X, y))

"""In real life, you wouldn't buy a car based on a single variable like `Age`. You would take into account a lot of different variables like our multiple linear model did!

### ‚úç ExerciseÔ∏è

You noticed that we did not include `Seller_Type` as one of the variables in our multiple linear regression. Figure out what steps you need to take to build a model with `Seller_Type` included. Check the $R^2$ to see if you do any better.
"""

### YOUR CODE HERE

### END CODE

"""# **‚úçÔ∏è Challenge Section: Finding The Best Deal**

Now that we've made a fit of each car's price using all the variables, we can now make predictions to compare each car's predicted price to its actual one. We can see which cars are a good deal, and which are overpriced.

First, let's start by making predictions with the fit we just created earlier. Feel free to look up sklearn or sci-kit learn's documentation [here](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html)! \\
(**Hint:** Try to find a method that lets you make predictions with your model.)

Then, let's make a scatterplot of predicted vs. real prices, using pyplot methods.
"""

plt.plot([-5,15],[-5,15]) #Drawing in the line of equality so we can compare
plt.title("Predicted vs. Real Prices")
plt.xlabel("Real price")
plt.ylabel("Predicted price")
#TODO: Make our predictions using the model we just created.
prediction = None
#TODO: Fill in code here to add a scatterplot of predicted vs. real prices

plt.show()

"""### üí° Discussion Question

There are a few weird things about this graph. Discuss:
* Which data points seem unusual? Which cars seem most overpriced, and which seem like the best deal?
* Do the data "look linear" overall? Are predicted prices equally likely to lie above or below the true price, no matter where we are in the graph?
* Some predicted prices seem impossible - which ones?

These issues suggest that, no matter what our $R^2$ says, linear regression might not be the best model for this situation. A more complex model could make more accurate predictions.

For now, let's stick with our linear regression. Let's add our predicted prices on to our data frame:
"""

pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

car_data['Prediction'] = prediction
print (car_data)

"""Now - assuming for now that the predicted scores are good ones - let's figure out the cars that are especially good or bad deals by comparing the real price to the predicted price.

Come up with a way to calculate the "Deal Score", and add a new column to the data frame. A car with a high Deal Score has a low true cost compared to its predicted value, while a car with a low Deal Score is overpriced.
"""

car_data['deal_score'] = None #FILL IN HERE
print (car_data)
#You can experiment with different ways of defining it.

"""Using the pandas sort_values function, identify the 10 most overpriced cars and the 10 cars that are the best deal."""

### YOUR CODE HERE

best_deals = None
most_overpriced = None
### END CODE
print (best_deals)
print (most_overpriced)

"""Here's the graphing code again from earlier. This time, plot the best deals in one color, the most overpriced cars in another color, and the other cars in a third color. Do your calculations align with your guesses from looking at the graph? What happens if you change your method of calculating the Deal Score?"""

plt.plot([-5,15],[-5,15]) #Drawing in the line of equality so we can compare
plt.title("Predicted vs. Real Prices")
plt.xlabel("Real price")
plt.ylabel("Predicted price")
#Make a scatterplot with several colors:
#Show 10 best deals in one color
#Show 10 most overpriced in another color
#Show the other cars in a third color
plt.show()

"""Congratulations! You've now identified the cars that are the best buy.

... Or have you? Why might a car have a lower-than-predicted price, besides a seller making a mistake?

What other data would you need to be really confident in your decision?
"""